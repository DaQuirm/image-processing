// Generated by CoffeeScript 1.3.3

window.addEventListener("load", function() {
  var applyFilter, canvas, context, eightArea, getPixel, gmaxInput, gminInput, histButton, histCanvas, histContext, linearContrastButton, lowpassFilter, lpfOneButton, lpfThreeButton, lpfTwoButton, setPixel;
  canvas = document.querySelector('canvas');
  histCanvas = document.querySelector('#histogram-canvas');
  context = canvas.getContext('2d');
  histContext = histCanvas.getContext('2d');
  getPixel = function(imageData, x, y) {
    var index;
    index = (x + y * imageData.width) * 4;
    return {
      r: imageData.data[index + 0],
      g: imageData.data[index + 1],
      b: imageData.data[index + 2],
      a: imageData.data[index + 3]
    };
  };
  setPixel = function(imageData, x, y, pixel) {
    var index;
    index = (x + y * imageData.width) * 4;
    imageData.data[index + 0] = pixel.r;
    imageData.data[index + 1] = pixel.g;
    imageData.data[index + 2] = pixel.b;
    return imageData.data[index + 3] = pixel.a;
  };
  canvas.addEventListener('dragenter', function(evt) {
    evt.stopPropagation();
    return evt.preventDefault();
  });
  canvas.addEventListener('dragexit', function(evt) {
    evt.stopPropagation();
    return evt.preventDefault();
  });
  canvas.addEventListener('dragover', function(evt) {
    evt.stopPropagation();
    return evt.preventDefault();
  });
  canvas.addEventListener('drop', function(evt) {
    var file, files, img, reader;
    evt.stopPropagation();
    evt.preventDefault();
    files = evt.dataTransfer.files;
    if (files.length > 0) {
      file = files[0];
      reader = new FileReader();
      img = document.createElement('img');
      img.addEventListener('load', function() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        return context.drawImage(img, 0, 0);
      });
      reader.onload = function(evt) {
        return img.src = evt.target.result;
      };
      return reader.readAsDataURL(file);
    }
  });
  histButton = document.querySelector('.hist-button');
  histButton.addEventListener('click', function() {
    var brightest, histData, i, imageData, pixel, scale, x, y, _i, _j, _k, _l, _m, _ref, _ref1, _results;
    histData = {
      r: new Uint32Array(256),
      g: new Uint32Array(256),
      b: new Uint32Array(256)
    };
    imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    brightest = {
      r: 0,
      g: 0,
      b: 0
    };
    for (x = _i = 0, _ref = imageData.width; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      for (y = _j = 0, _ref1 = imageData.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        pixel = getPixel(imageData, x, y);
        histData.r[pixel.r]++;
        histData.g[pixel.g]++;
        histData.b[pixel.b]++;
        if (histData.r[pixel.r] > brightest.r) {
          brightest.r = histData.r[pixel.r];
        }
        if (histData.g[pixel.g] > brightest.g) {
          brightest.g = histData.g[pixel.g];
        }
        if (histData.b[pixel.b] > brightest.b) {
          brightest.b = histData.b[pixel.b];
        }
      }
    }
    scale = 500 / Math.max(brightest.r, brightest.g, brightest.b);
    histContext.clearRect(0, 0, histCanvas.width, histCanvas.height);
    histContext.fillStyle = 'rgba(255, 0, 0, 0.33)';
    for (i = _k = 0; _k <= 255; i = ++_k) {
      histContext.fillRect(i * 4, histCanvas.height - histData.r[i] * scale, 4, histData.r[i] * scale);
    }
    histContext.fillStyle = 'rgba(0, 255, 0, 0.33)';
    for (i = _l = 0; _l <= 255; i = ++_l) {
      histContext.fillRect(i * 4, histCanvas.height - histData.g[i] * scale, 4, histData.g[i] * scale);
    }
    histContext.fillStyle = 'rgba(0, 0, 255, 0.33)';
    _results = [];
    for (i = _m = 0; _m <= 255; i = ++_m) {
      _results.push(histContext.fillRect(i * 4, histCanvas.height - histData.b[i] * scale, 4, histData.b[i] * scale));
    }
    return _results;
  });
  eightArea = function(imageData, x, y) {
    var area, i, _i;
    area = new Array(3);
    for (i = _i = 0; _i <= 2; i = ++_i) {
      area[i] = new Array(3);
    }
    area[1][1] = getPixel(imageData, x, y);
    if (x !== 0 && y !== 0) {
      area[0][0] = getPixel(imageData, x - 1, y - 1);
    }
    if (y !== 0) {
      area[0][1] = getPixel(imageData, x, y - 1);
    }
    if (x !== imageData.width - 1 && y !== 0) {
      area[0][2] = getPixel(imageData, x + 1, y + 1);
    }
    if (x !== 0) {
      area[1][0] = getPixel(imageData, x - 1, y);
    }
    if (x !== imageData.width - 1) {
      area[1][2] = getPixel(imageData, x + 1, y);
    }
    if (x !== 0 && y !== imageData.height - 1) {
      area[2][0] = getPixel(imageData, x - 1, y + 1);
    }
    if (y !== imageData.height - 1) {
      area[2][1] = getPixel(imageData, x, y + 1);
    }
    if (x !== imageData.width - 1 && y !== imageData.height - 1) {
      area[2][2] = getPixel(imageData, x + 1, y + 1);
    }
    return area;
  };
  applyFilter = function(filter, area) {
    var brightness, col, filterSum, row, _i, _j, _ref, _ref1;
    brightness = {
      r: 0,
      g: 0,
      b: 0
    };
    filterSum = 0;
    for (row = _i = 0, _ref = filter.length; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
      if (area[row]) {
        for (col = _j = 0, _ref1 = filter[row].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          if (!area[row][col]) {
            continue;
          }
          brightness.r += area[row][col].r * filter[row][col];
          brightness.g += area[row][col].g * filter[row][col];
          brightness.b += area[row][col].b * filter[row][col];
          filterSum += filter[row][col];
        }
      }
    }
    return {
      r: brightness.r / filterSum,
      g: brightness.g / filterSum,
      b: brightness.b / filterSum,
      a: 255
    };
  };
  lowpassFilter = function(context, matrix) {
    var area, filteredImageData, imageData, pixel, x, y, _i, _j, _ref, _ref1;
    imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    filteredImageData = context.createImageData(canvas.width, canvas.height);
    for (x = _i = 0, _ref = imageData.width; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      for (y = _j = 0, _ref1 = imageData.height; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        area = eightArea(imageData, x, y);
        pixel = applyFilter(matrix, area);
        setPixel(filteredImageData, x, y, pixel);
      }
    }
    return context.putImageData(filteredImageData, 0, 0);
  };
  lpfOneButton = document.querySelector('.lpf1-button');
  lpfOneButton.addEventListener('click', function() {
    return lowpassFilter(context, [[1, 1, 1], [1, 1, 1], [1, 1, 1]]);
  });
  lpfTwoButton = document.querySelector('.lpf2-button');
  lpfTwoButton.addEventListener('click', function() {
    return lowpassFilter(context, [[1, 1, 1], [1, 2, 1], [1, 1, 1]]);
  });
  lpfThreeButton = document.querySelector('.lpf3-button');
  lpfThreeButton.addEventListener('click', function() {
    return lowpassFilter(context, [[1, 2, 1], [2, 4, 2], [1, 2, 1]]);
  });
  linearContrastButton = document.querySelector('.lcontrast-button');
  gminInput = document.querySelector('.g-min-input');
  gmaxInput = document.querySelector('.g-max-input');
  return linearContrastButton.addEventListener('click', function() {
    var brightest, darkest, filteredImageData, gmax, gmin, imageData, pixel, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
    gmin = gminInput.value;
    gmax = gmaxInput.value;
    imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    filteredImageData = context.createImageData(canvas.width, canvas.height);
    brightest = {
      r: 0,
      g: 0,
      b: 0
    };
    darkest = {
      r: 0,
      g: 0,
      b: 0
    };
    for (x = _i = 0, _ref = imageData.width; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      for (y = _j = 0, _ref1 = imageData.height; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        pixel = getPixel(imageData, x, y);
        if (pixel.r > brightest.r) {
          brightest.r = pixel.r;
        }
        if (pixel.g > brightest.g) {
          brightest.g = pixel.g;
        }
        if (pixel.b > brightest.b) {
          brightest.b = pixel.b;
        }
        if (pixel.r < darkest.r) {
          darkest.r = pixel.r;
        }
        if (pixel.g < darkest.g) {
          darkest.g = pixel.g;
        }
        if (pixel.b < darkest.b) {
          darkest.b = pixel.b;
        }
      }
    }
    for (x = _k = 0, _ref2 = imageData.width; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; x = 0 <= _ref2 ? ++_k : --_k) {
      for (y = _l = 0, _ref3 = imageData.height; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; y = 0 <= _ref3 ? ++_l : --_l) {
        pixel = getPixel(imageData, x, y);
        pixel.r = (pixel.r - darkest.r) / (brightest.r - darkest.r) * (gmax - gmin) + gmin;
        pixel.g = (pixel.g - darkest.g) / (brightest.g - darkest.r) * (gmax - gmin) + gmin;
        pixel.b = (pixel.b - darkest.b) / (brightest.b - darkest.r) * (gmax - gmin) + gmin;
        setPixel(filteredImageData, x, y, pixel);
      }
    }
    return context.putImageData(filteredImageData, 0, 0);
  });
});
